#No mesmo nível da pasta Ciclo3 executar um terminal (get bash here) e executar
npx create-react-app ciclo4

# Isso deve criar a aplicação com algumas pastas
- Em public/index.html já alterar o título.

# Em src deixar os arquivos
- App.css: Deixar sem conteúdo
- index.js: Remover o import index.css e o reportWebVitals
- setupTests.js
- App.js: Deixar com o conteúdo

import './App.css';
function App() {
  return (
    <div>
    </div>
  );
}
export default App;

#Para trabalhar com o sistema de camadas, criar dentro de src a pasta views.
#Nesta pasta ficarão localizadas as páginas do app, como a home
-Criar a pasta home e adicionar o arquivo index.js dentro dela

#Em um terminal na pasta instalar
npm install react-router-dom
#ele permite criar rotas que facilitam a coneção entre as pastas.

#Realizar importação dele no App.js
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';

#Dentro do views/Home/index.js
export const Home = () =>{
    return (
        <div>
            Home
        </div>
    )
}

#importar o Home
#dentro de App.js:
import { Home } from './views/Home'



#Para criar a rota adicionar o Router
      <Router>
        <Switch>
          <Route path="/" component={Home}/>
        </Switch>
      </Router>

#Esse processo pode ser realizado para adicionar as pastas com as funcionalidades da página do app

#Para auxiliar na estilização será utilizada o react strap
npm install --save bootstrap reactstrap
#Eles devem ser importados no src/index.js
import 'bootstrap/dist/css/bootstrap.min.css';

#Após a importação, criar dentro de src uma pasta chamada components
#Esses componentes são exportados para serem utilizados nas outras páginas

#para formatar a barra de navegação
#Criar em components/Menu.js
#Adicionar as informações básicas
export const Menu = () => {
    return (
        <div>
            <h1>Menu</h1>
        </div>
    )
}

#Em App.js, importar o menu e adicionar dentro de Router a posição onde ele deve ficar dentro de Router (Antes de Swich para aparecer independente da página).
import { Menu } from './components/Menu'

      <Router>
        <Menu/>
        <Switch>
          <Route exact path="/" component={Home}/>
        </Switch>
      </Router>

#Iniciar a personalização, sendo que a maior parte pode ser editada dentre os modelos padrões.

#Atalho para indentar é shift alt f

#As formatações segue os padrões do reactstrap

# Para alterar a logo, alterar o arquivo em public/favicon.ico
# Alterar o index.html

#Para realizar requisições, utilziar o axios
npm install --save axios

# Essa forma de trabalho fragmentada deve ser descrita no index.js em src
ReactDOM.render(
  <React.Fragment>
    <App />
  </React.Fragment>,
  document.getElementById('root')
);

#Adicionar dentro de src uma pasta config com um index.js e informar o link para a api
export const api = "http://localhost:3001";

#inserir nas páginas que farão requisição o import
import axios from "axios"
import { api } from "../../../config"
import { useEffect, useState } from "react"

#Inserir os dados de forma dinâmica:
// Configurar os dados (definir e permitir configurar) e status
    const [data, setData] = useState([]);
    const [status, setStatus] = useState({
        type: '',
        message: ''
    })

//criar a função de consulta na api
    const getServicos = async () => {
        await axios.get(api + "/listar-servicos")
            .then((response) => {
                // console.log(response.data.servicos);
                setData(response.data.servicos);
            })
            .catch(() => {
                // console.log("Não foi possível conectar a api.")
                setStatus({
                    type: 'error',
                    message: "Não foi possível conectar a api."
                })
            })
    }

//response.data.servicos = servicos é o nome que foi dado à resposta no back end

//Executar a função e armazenar em uma lista
    useEffect(()=>{
        getServicos()
    },[])

//para exibir o status quando com erro
                {/* Testar se houve error */}
                {status.type === 'error' ?
                <Alert color="danger">
                    {status.message}
                </Alert> : ''} 

//para tornar a tabela dinâmica configurar o corpo da tabela
                    <tbody>
                        {data.map(item => (
                            <tr key={item.id}>
                                <th>{item.id}</th>
                                <td>{item.nome}</td>
                                <td>{item.descricao}</td>
                                <td className="text-center/">Botão</td>
                            </tr>
                        ))}
                    </tbody>








